import axios from "axios";
import { getContentType } from "./api.helper";
import { tokenService, oauthService } from "@features/auth/services";
import { timeToMs } from "../lib/helpers/system";

interface FailedRequest {
    resolve: (value?: unknown) => void;
    reject: (reason?: unknown) => void;
}

let isRefreshing = false;
let failedQueue: FailedRequest[] = [];

const axiosInstance = axios.create({
    baseURL: "http://localhost:5000/api",
    timeout: timeToMs("10s"),
    headers: getContentType(),
    withCredentials: true,
});

axiosInstance.interceptors.request.use((config) => {
    return config;
});

axiosInstance.interceptors.response.use(
    (response) => response,
    async (error) => {
        const originalRequest = error.config;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏
        if (error.message === "Network Error") {
            return Promise.reject(error);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 401 (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω)
        if (error.response?.status === 401 && originalRequest.url === "/oauth/refresh-access-token") {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: Refresh Token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
            oauthService.logout(); // –†–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return Promise.reject(error);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 401 (–ø–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω)
        if (error.response?.status === 401 && !originalRequest._retry) {
            if (isRefreshing) {
                // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, —Å—Ç–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
                return new Promise((resolve, reject) => {
                    failedQueue.push({ resolve, reject });
                });
            }

            isRefreshing = true;
            originalRequest._retry = true;

            try {
                console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω...");
                await tokenService.refreshAccessToken(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –æ—á–µ—Ä–µ–¥–∏, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω
                failedQueue.forEach((queuedRequest) => queuedRequest.resolve());
                failedQueue = []; // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å

                isRefreshing = false;
                return axiosInstance(originalRequest); // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
            } catch (error) {
                console.error("üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
                failedQueue.forEach((queuedRequest) => queuedRequest.reject(error));
                failedQueue = []; // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å

                isRefreshing = false;
                return Promise.reject(error);
            }
        }

        return Promise.reject(error);
    }
);

export default axiosInstance;